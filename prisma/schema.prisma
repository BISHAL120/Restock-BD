generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  RESELLER
  USER
}

enum ResellerLevel {
  BEGINNER
  BRONZE
  SILVER
  GOLD
  ELITE
  LEGENDARY
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String        @unique
  password      String
  email         String?
  address       String?
  profileImage  String?
  role          Role[]        @default([USER])
  verified      Boolean       @default(false)
  isActive      Boolean       @default(false)
  wallet        Float         @default(0)
  companyName   String?
  resellerLevel ResellerLevel @default(BEGINNER)
  referralCode  Float         @unique
  referredBy    String? // referralCode of inviter
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orders        Order[]
  tickets       SupportTicket[]
  withdrawals   WithdrawalRequest[]
  walletHistory WalletTransaction[]
}

model Product {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  price         Float
  SellingPrice  Float
  totalSales    String
  stock         String
  images        String[]
  subCategory   String
  tags          String[]
  variants      ProductVariant[]
  inStock       Boolean          @default(true)
  SubCategory   SubCategory?     @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?          @db.ObjectId
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  Order Order[]
}

model ProductVariant {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  product        Product  @relation(fields: [productId], references: [id])
  productId      String   @db.ObjectId
  name           String // e.g., "Red - Large"
  additionalCost Float    @default(0)
  inStock        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SubCategory {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  imageUrl     String?
  description  String?
  category     String
  productCount Int       @default(0)
  products     Product[]
  Category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   String?   @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  productCount Int           @default(0)
  subCategory  SubCategory[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Order {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  reseller   User    @relation(fields: [resellerId], references: [id])
  resellerId String  @db.ObjectId
  product    Product @relation(fields: [productId], references: [id])
  productId  String  @db.ObjectId
  variantId  String? // optional for variant

  customerName    String
  customerPhone   String
  customerAddress String
  paymentMethod   PaymentMethod

  originalPrice  Float
  resellPrice    Float
  deliveryCharge Float
  advancePaid    Float
  cod            Boolean
  status         OrderStatus @default(PENDING)

  profit      Float // calculated on complete
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WithdrawalRequest {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  reseller    User             @relation(fields: [resellerId], references: [id])
  resellerId  String           @db.ObjectId
  amount      Float
  status      WithdrawalStatus @default(PENDING)
  processedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model WalletTransaction {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  user        User                  @relation(fields: [userId], references: [id])
  userId      String                @db.ObjectId
  amount      Float
  type        WalletTransactionType
  reference   String? // optional order/withdrawal ID
  description String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model SupportTicket {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  subject   String
  message   String
  status    TicketStatus @default(OPEN)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model AdminActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId   String
  action    String
  metadata  Json
  createdAt DateTime @default(now())
}

model ReferralCommission {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  referredUser String
  orderId      String?
  commission   Float
  createdAt    DateTime @default(now())
}

model PlatformSetting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums Start

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  COD
  PREPAID
}

enum WalletTransactionType {
  CREDIT
  DEBIT
}
